# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet clog "console.log()" b
console.log($1);
endsnippet

snippet af "Arrow function" b
${1:var} ${2:function_name} = (${3:argument})=>{
	${VISUAL}$0
}
endsnippet

snippet loader "Remix loader function" b
export ${1:const} ${2:loader} = ({ ${3:foo} }: LoaderArgs)=>{
	${VISUAL}$0
}
endsnippet

snippet ErrorBoundary "Remix error boundary" b
export function ErrorBoundary({ error }: { error: Error }) {
	console.error(error);
	${VISUAL}$0
	return <div>An unexpected error occurred: {error.message}</div>;
}
endsnippet

snippet links "Remix links" b
export function links() {
	return [
		// ...ExampleLinks(),
		// { rel: "stylesheet", href: styles },
		${VISUAL}$0
	];
}
endsnippet

snippet action "Remix action" b
export const action = async ({ request }: ActionArgs) => {
	return { ${0:foo} }
}
endsnippet

snippet useLoaderData "Remix useLoaderData" b
const { ${0:foo} } = useLoaderData<typeof loader>();
endsnippet

# Remix + SuperJSON example:
# https://github.com/kiliman/remix-superjson/tree/d6593dd2e15c5349274d02a7b9fecc993f03867d
snippet useSuperLoaderData "Remix useLoaderData with SuperJSON" b
const { ${0:foo} } = useSuperLoaderData<typeof loader>();
endsnippet
